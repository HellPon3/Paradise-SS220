name: CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  merge_group:

jobs:
  run_linters:
    name: Run Linters
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Setup Cache
        uses: actions/cache@v4
        with:
          path: $HOME/SpacemanDMM
          key: ${{ runner.os }}-spacemandmm

      - name: Install Tools
        run: |
          bash tools/ci/install_build_deps.sh
          bash tools/ci/install_dreamchecker.sh

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
          cache-dependency-path: ./tgui/yarn.lock

      - run: pip install -r tools/requirements.txt
      - name: Run Linters
        run: |
          tools/ci/check_json.sh
          tgui/bin/tgui --ci
          python tools/ci/check_grep2.py
          python tools/ci/check_line_endings.py
          python tools/ci/check_file_names.py
          python tools/ci/unticked_files.py ${GITHUB_WORKSPACE}
          python tools/ci/illegal_dme_files.py ${GITHUB_WORKSPACE}
          python tools/ci/define_sanity.py
          python tools/ci/restrict_file_types.py
          python tools/ci/check_map_sizes.py
          python tools/ci/verify_sql_version.py
          python tools/ci/no_duplicate_definitions.py
          python tools/ci/check_icons.py
<<<<<<< HEAD
=======
          python tools/ci/check_random_spawner_prefabs.py
          python -m tools.ci.check_map_sizes
>>>>>>> e3b04880c842ca6b85a169dd5affd7f668c3a555
          python -m tools.ci.check_legacy_attack_chain
          python -m tools.maplint.source --github

      - name: Run DreamChecker
        shell: bash
        run: ~/dreamchecker 2>&1 | bash tools/ci/annotate_dm.sh

  odlint:
    name: Lint with OpenDream
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Setup OD
        run: |
          bash tools/ci/setup_od.sh
      - name: Setup .NET SDK
<<<<<<< HEAD
        uses: actions/setup-dotnet@v4.3.0
=======
        uses: actions/setup-dotnet@v4.3.1
        env:
          DOTNET_INSTALL_DIR: './_work/.dotnet'
>>>>>>> e3b04880c842ca6b85a169dd5affd7f668c3a555
        with:
          dotnet-version: 9.x
      - name: Run OD
        run: |
          bash tools/ci/run_od.sh

  compile_all_maps:
    name: Compile All Maps
<<<<<<< HEAD
    runs-on: ubuntu-22.04
=======
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        byondtype: ['STABLE']
>>>>>>> e3b04880c842ca6b85a169dd5affd7f668c3a555
    steps:
      - uses: actions/checkout@v4
      - name: Setup Cache
        uses: actions/cache@v4
        with:
          path: $HOME/BYOND
          key: ${{ runner.os }}-byond
      - name: Compile All Maps
        run: |
          tools/ci/install_byond.sh
          source $HOME/BYOND/byond/bin/byondsetup
          tools/ci/generate_maplist.sh
          DreamMaker -DMULTIINSTANCE -DCIMAP paradise.dme

  station_mapload_tests:
    name: Station Tests
    runs-on: self-hosted
    strategy:
      fail-fast: false # Let all map tests run to completion
      matrix:
        station: ['boxstation', 'deltastation', 'metastation']
        byondtype: ['STABLE']
    steps:
      - uses: actions/checkout@v4
      - name: Setup Cache
        uses: actions/cache@v4
        with:
          path: $HOME/BYOND
          key: ${{ runner.os }}-byond
      - name: Install RUST_G Deps
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update || true
          sudo apt install -y zlib1g-dev:i386
          tools/ci/install_rustg.sh
      - name: Compile & Run Unit Tests
        run: |
          tools/ci/install_byond.sh '${{ matrix.byondtype }}'
          source $HOME/BYOND/byond/bin/byondsetup
          DreamMaker -DMAP_TESTS -DTEST_CONFIG_OVERRIDE=\"unit_tests\" -DMULTIINSTANCE -DCIBUILDING paradise.dme
          echo '/datum/map/${{ matrix.station }}' > data/next_map.txt
          tools/ci/run_server.sh

  unit_tests_and_sql:
    name: Unit Tests + SQL Validation
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        byondtype: ['STABLE']
    steps:
      - uses: actions/checkout@v4
      - name: Setup Cache
        uses: actions/cache@v4
        with:
          path: $HOME/BYOND
          key: ${{ runner.os }}-byond
      - name: Setup & Validate DB
        run: |
          sudo service mysql start
          python3 tools/ci/generate_sql_scripts.py
          tools/ci/validate_sql.sh
      - name: Install RUST_G Deps
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update || true
          sudo apt install -y zlib1g-dev:i386
          tools/ci/install_rustg.sh
      - name: Compile & Run Unit Tests
        run: |
          tools/ci/install_byond.sh '${{ matrix.byondtype }}'
          source $HOME/BYOND/byond/bin/byondsetup
          DreamMaker -DGAME_TESTS -DTEST_CONFIG_OVERRIDE=\"unit_tests\" -DMULTIINSTANCE -DCIBUILDING paradise.dme
          echo '/datum/map/test_tiny' > data/next_map.txt
          tools/ci/run_server.sh

# TODO: Add back when we have a Windows runner (never)
# windows_dll_tests:
#   name: Windows RUSTG Validation
#   runs-on: self-hosted
#   steps:
#     - uses: actions/checkout@v4
#     - uses: actions/setup-python@v5
#       with:
#         python-version: '3.8.2' # Script was made for 3.8.2
#         architecture: 'x86' # This MUST be x86
#     - run: python tools/ci/validate_rustg_windows.py
